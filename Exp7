#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define MAX_LEN 1000

void frequencyAnalysis(const char *text, int freq[256]) {
    for (int i = 0; text[i]; i++) {
        unsigned char ch = text[i];
        freq[ch]++;
    }
}

void printFrequency(int freq[256]) {
    printf("\nSymbol Frequency:\n");
    for (int i = 32; i < 127; i++) { // printable ASCII
        if (freq[i] > 0)
            printf("'%c' : %d\n", i, freq[i]);
    }
}

void applyMapping(const char *cipher, const char mapping[256], char *output) {
    for (int i = 0; cipher[i]; i++) {
        unsigned char ch = cipher[i];
        if (mapping[ch])
            output[i] = mapping[ch];
        else
            output[i] = cipher[i]; // unchanged if no mapping
    }
    output[strlen(cipher)] = '\0';
}

int main() {
    const char cipherText[MAX_LEN] =
        "53‡‡†305))6*;4826)4‡.)4‡);806*;48†8¶60))85;;]8*;:‡*8†83"
        "(88)5*†;46(;88*96*?;8)*‡(;485);5*†2:*‡(;4956*2(5*—4)8¶8*"
        ";4069285);)6†8)4‡‡;1(‡9;48081;8:8‡1;48†85;4)485†528806*81"
        "(‡9;48;(88;4(‡?34;48)4‡;161;:188;‡?;";

    int freq[256] = {0};
    char mapping[256] = {0};
    char decrypted[MAX_LEN];

    // Step 1: Frequency analysis
    frequencyAnalysis(cipherText, freq);
    printFrequency(freq);

    // Step 2: User interactive mapping
    printf("\nEnter character mappings (symbol letter). Enter '0' to finish.\n");
    while (1) {
        char symbol, letter;
        printf("Map symbol: ");
        symbol = getchar();
        if (symbol == '0') break;
        while (getchar() != '\n'); // clear buffer

        printf("To letter: ");
        letter = getchar();
        while (getchar() != '\n'); // clear buffer

        mapping[(unsigned char)symbol] = letter;
    }

    // Step 3: Apply mapping and show result
    applyMapping(cipherText, mapping, decrypted);
    printf("\nDecrypted Output:\n%s\n", decrypted);

    return 0;
}

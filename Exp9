#include <stdio.h>
#include <string.h>
#include <ctype.h>

char matrix[5][5];

void prepareMatrix(const char *keyword) {
    int used[26] = {0};
    used['J' - 'A'] = 1; // Merge I and J
    int row = 0, col = 0;

    // Fill keyword
    for (int i = 0; keyword[i]; i++) {
        char ch = toupper(keyword[i]);
        if (ch == 'J') ch = 'I';
        if (!used[ch - 'A']) {
            matrix[row][col++] = ch;
            used[ch - 'A'] = 1;
            if (col == 5) { col = 0; row++; }
        }
    }

    // Fill remaining alphabet
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            matrix[row][col++] = ch;
            used[ch - 'A'] = 1;
            if (col == 5) { col = 0; row++; }
        }
    }
}

void findPos(char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I';
    for (int i = 0; i < 5; i++)
        for (int j = 0; j < 5; j++)
            if (matrix[i][j] == ch) {
                *row = i; *col = j; return;
            }
}

void decryptPlayfair(const char *ciphertext) {
    printf("Decrypted Message:\n");
    for (int i = 0; i < strlen(ciphertext); i += 2) {
        char a = toupper(ciphertext[i]);
        char b = toupper(ciphertext[i + 1]);

        int r1, c1, r2, c2;
        findPos(a, &r1, &c1);
        findPos(b, &r2, &c2);

        if (r1 == r2)
            printf("%c%c", matrix[r1][(c1 + 4) % 5], matrix[r2][(c2 + 4) % 5]);
        else if (c1 == c2)
            printf("%c%c", matrix[(r1 + 4) % 5][c1], matrix[(r2 + 4) % 5][c2]);
        else
            printf("%c%c", matrix[r1][c2], matrix[r2][c1]);
    }
    printf("\n");
}

int main() {
    char keyword[] = "MONARCHY";  // Adjust based on actual key
    prepareMatrix(keyword);

    const char ciphertext[] =
        "KXJEYUREBEZWEHEWRYTUHEYFSKREHEGOYFIWTTTUOLKSYCAJPO"
        "BOTEIZONTXBYBNTGONEYCUZWRGDSONSXBOUYWRHEBAAHYUSEDQ";

    decryptPlayfair(ciphertext);
    return 0;
}
